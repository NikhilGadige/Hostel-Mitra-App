import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:get/get.dart';
import 'package:hostel_management/Authentication/Models/user_model.dart';
import 'package:flutter/material.dart';

class UserRepository extends GetxController {
  static UserRepository get instance => Get.find();
  final _db = FirebaseFirestore.instance;

  // Method to create a user
  Future<void> createUser(UserModel user) async {
    // Add a new user document with a unique ID generated by Firestore
    DocumentReference docRef = await _db.collection("Users").add(user.toJson());
    Get.snackbar(
      "Success",
      "Your account has been created",
      snackPosition: SnackPosition.BOTTOM,
      backgroundColor: Colors.green.withOpacity(0.1),
    );
    // Optionally, you could store the user's unique ID back in the UserModel if needed
    // user.id = docRef.id;  // Assuming you have an 'id' field in UserModel
  }

  // Method to fetch user details by email
  Future<UserModel?> getUserDetails(String email) async {
    final snapshot = await _db.collection("Users").where("Email", isEqualTo: email).get();

    if (snapshot.docs.isNotEmpty) {
      final userData = snapshot.docs.map((e) => UserModel.fromSnapshot(e)).single;
      return userData;
    } else {
      // Handle case where user is not found
      Get.snackbar(
        "Error",
        "User not found",
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red.withOpacity(0.1),
      );
      return null; // Return null if no user found
    }
  }

  // Method to update user details
  Future<void> updateUserDetails(UserModel user) async {
    // Assume that the user's email is unique and used as the document ID
    // Alternatively, use a user ID if you have one.
    final userQuery = await _db.collection("Users").where("Email", isEqualTo: user.email).get();

    if (userQuery.docs.isNotEmpty) {
      String userId = userQuery.docs.first.id; // Get the document ID of the user

      await _db.collection("Users").doc(userId).update(user.toJson()).whenComplete(
            () => Get.snackbar(
          "Success",
          "Your account has been updated",
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: Colors.green.withOpacity(0.1),
        ),
      ).catchError((error, stackTrace) {
        Get.snackbar(
          "Error",
          "Something went wrong, Please try again!",
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: Colors.red.withOpacity(0.1),
        );
        print(error.toString());
      });
    } else {
      // Handle case where user is not found
      Get.snackbar(
        "Error",
        "User not found for update",
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red.withOpacity(0.1),
      );
    }
  }
}
